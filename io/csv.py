import numpy as np
import os.path

from .. import __version__, Laser, LaserCalibration, LaserConfig, LaserData
from .error import LaserLibException

from typing import Dict, TextIO, Union


def load_raw(fp: Union[str, TextIO]) -> np.ndarray:
    if isinstance(fp, str):
        fp = open(fp, "rb")

    try:
        cleaned = (line.replace(b";", b",").replace(b"\t", b",") for line in fp)
        data = np.genfromtxt(cleaned, delimiter=b",", comments=b"#", dtype=float)
    except ValueError as e:
        raise LaserLibException("Could not parse file.") from e

    if data.ndim != 2:
        raise LaserLibException(f"Invalid data dimensions '{data.ndim}'.")

    fp.close()
    return data


def load(path: str, read_header: bool = False) -> Laser:
    def string_to_dict(s: str, delim: str = ";", kvsep: str = "=") -> Dict[str, str]:
        tokens = s.split(delim)
        return {k: v for k, v in [token.split(kvsep) for token in tokens]}

    with open(path, "rb") as fp:
        if read_header:
            line = fp.readline().lstrip(b"#").strip()
            if not line.startswith(b"Laserlib "):  # CSV generated by pewpew
                raise LaserLibException("Missing header!")
            # Version
            version = line.split(b" ")[1]
            if version < b"0.1.1":
                raise LaserLibException(f"Unsupported CSV version '{version}'.")
            # Isotope
            line = fp.readline().lstrip(b"#").strip()
            if b"=" not in line:
                raise LaserLibException(f"Malformed isotope line '{line}'.")
            tokens = line.split(b"=")
            if tokens[0] != b"isotope":
                raise LaserLibException(f"Malformed isotope line '{line}'.")
            isotope = tokens[1].decode()
            # Config
            line = fp.readline().lstrip(b"#").strip()
            try:
                config_dict = string_to_dict(line.decode())
                config = LaserConfig(
                    spotsize=float(config_dict["spotsize"]),
                    speed=float(config_dict["speed"]),
                    scantime=float(config_dict["scantime"]),
                )
            except (KeyError, ValueError):
                raise LaserLibException(f"Malformed config line '{line}'.")
            # Calibration
            try:
                line = fp.readline().lstrip(b"#").strip()
                cal_dict = string_to_dict(line.decode())
                calibration = LaserCalibration(
                    intercept=float(cal_dict["intercept"]),
                    gradient=float(cal_dict["gradient"]),
                    unit=cal_dict["unit"],
                )
            except (KeyError, ValueError):
                raise LaserLibException(f"Malformed calibration line '{line}'")
        else:
            isotope = "_"
            config = LaserConfig()
            calibration = LaserCalibration()

        data = load_raw(fp)

    return Laser(
        data={isotope: LaserData(data, calibration)},
        config=config,
        name=os.path.splitext(os.path.basename(path))[0],
        filepath=path,
    )


def make_header(laser: Laser, isotope: str) -> str:
    return (
        f"Laserlib {__version__}\nisotope={isotope}\n"
        f"spotsize={laser.config.spotsize};speed={laser.config.speed};"
        f"scantime={laser.config.scantime}\n"
        f"intercept={laser.data[isotope].calibration.intercept};"
        f"gradient={laser.data[isotope].calibration.gradient};"
        f"unit={laser.data[isotope].calibration.unit}\n"
    )


def save(path: str, laser: Laser, isotope: str, write_header: bool = False) -> None:
    header = make_header(laser, isotope) if write_header else ""
    np.savetxt(
        path, laser.data[isotope], fmt="%g", delimiter=",", comments="#", header=header
    )
